generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  username String @db.VarChar(100)
  email String @db.VarChar(255) @unique
  realName String @db.VarChar(100)
  passportNumber String @db.VarChar(9) @unique
  password String @db.VarChar(255)
  verifyToken String? @db.VarChar(64) @unique
  avatarPath String @db.VarChar(255) @default("/profiles/default.svg")

  rank Rank @relation(fields: [rankId], references: [id])
  rankId Int @default(1)
  calendar Calendar[]
  rating Rating?
  studentCourse Course? @relation("studentCourse")
  teacherCourse Course[] @relation("teacherCourses")

  @@map("users")
}

model Rank {
  id Int @id @default(autoincrement())
  name  String @db.VarChar(9)
  userId User[]

  @@map("ranks")
}

model Calendar {
  id Int @id @default(autoincrement())
  title String @db.VarChar(50)
  description String? @db.VarChar(100)
  date DateTime @db.Timestamp()
  color String @db.VarChar(7) @default("#ffffff")

  user User? @relation(fields: [userId], references: [id])
  userId Int

  @@map("calendar")
}

model Rating {
  id Int @id @default(autoincrement())
  ratings Int @default(0)
  total Int @default(0)

  user User @relation(fields: [userId], references: [id])
  userId Int @unique

  @@map("ratings")
}

model Course {
  id Int @id @default(autoincrement())
  theory Int @default(0)
  practise Int @default(0)

  student User @relation("studentCourse", fields: [studentId], references: [id])
  studentId Int @unique
  teacher User @relation("teacherCourses", fields: [teacherId], references: [id])
  teacherId Int
  payments Payment[]
  vehicle Vehicle @relation(fields: [vehicleId], references: [id])
  vehicleId Int
  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  exams Exam[]

  @@map("courses")
}

model Payment {
  id Int @id @default(autoincrement())
  description String @db.VarChar(100)
  amount Int @default(0)
  created DateTime @db.Date @default(now())
  due DateTime @db.Date @default(now())
  state Int @default(0)

  course Course @relation(fields: [courseId], references: [id])
  courseId Int

  @@map("payments")
}

model Vehicle {
  id Int @id @default(autoincrement())
  plate String @db.VarChar(7) @unique
  color String? @default("white")
  driveType String @default("manual")
  brand String @db.VarChar(50)
  type String @db.VarChar(100)
  imageUrl String @db.VarChar(100) @default("/vehicles/fallback.png")

  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int @default(1)
  course Course[]

  @@map("vehicles")
}

model Category {
  id Int @id @default(autoincrement())
  category String @db.VarChar(3)

  vehicle Vehicle[]
  course Course[]

  @@map("categories")
}

model Exam {
  id Int @id @default(autoincrement())
  date DateTime @db.Timestamp()
  passed Boolean

  course Course @relation(fields: [courseId], references: [id])
  courseId Int

  @@map("exams")
}